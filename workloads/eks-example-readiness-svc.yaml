#aws elbv2 describe-target-health --target-group-arn arn:aws:elasticloadbalancing:eu-west-1:382076407153:targetgroup/k8s-eksexamp-eksexamp-d0255f8e9f/1c5ff63954cfc9fd --query 'TargetHealthDescriptions[].[Target.Id,TargetHealth.State]' --output table
apiVersion: v1
kind: Service
metadata:
  name: eks-example-readiness
  namespace: eks-example-readiness
  labels:
    app: eks-example-readiness
  annotations:
    external-dns.alpha.kubernetes.io/hostname: eks-example-readiness.eks.demo3.allamand.com
    service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
    service.beta.kubernetes.io/aws-load-balancer-type: 'external' # important for not using the "in-tree" code
    #service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: 'instance'
    service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: 'ip'
    # do not apply this manifest on the cluster
    flux.weave.works/ignore: 'true'
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: eks-example-readiness
  #https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-readiness-gate
  #https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.2/deploy/pod_readiness_gate/
  #For readiness gate configuration to be injected to the pod spec, you need to apply the label elbv2.k8s.aws/pod-readiness-gate-inject: enabled to the pod namespace
  #readinessGates:
  #  - conditionType: "www.example.com/feature-1"
